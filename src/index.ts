#!/usr/bin/env node

import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { StdioServerTransport } from "@modelcontextprotocol/sdk/server/stdio.js";
import { z } from "zod";
import { spawn } from "child_process";
import { promisify } from "util";
import { readdir, access } from "fs/promises";
import path from "path";

// MCP server for ECUC data extraction
const server = new McpServer({
  name: "mcp-ecuc-server",
  version: "1.0.0",
  capabilities: {
    tools: {},
    resources: {},
  },
});

// Path to the Java ECUC project (adjust as needed)
const ECUC_PROJECT_PATH = process.env.ECUC_PROJECT_PATH || "../mcp-ecuc";
const JAVA_EXTRACTOR_CLASS = "EcucExtractor";

/**
 * Helper function to execute Java ECUC extractor with a custom Java snippet
 */
async function executeJavaExtractor(command: string): Promise<string> {
  return new Promise((resolve, reject) => {
    try {
      // Determine which shell script to use based on the command
      let scriptPath = "";
      let javaCodeToInject = "";

      switch (command) {
        case "getAllComIPdus":
          javaCodeToInject = `
        // Get all ComIPdus from Com model
        java.util.ArrayList<com.ComIPdu> allComIPdus = ecucDataModel.getCom().getComIPdus();
        
        System.out.println("All ComIPdus from Com model:");
        System.out.println("Total ComIPdus count: " + allComIPdus.size());
        
        for (com.ComIPdu comIPdu : allComIPdus) {
            System.out.println("- " + comIPdu.getName() + 
                             " (Direction: " + comIPdu.getPduDirection() + 
                             ", PDU: " + comIPdu.getEcucPduRef().getPduName() + ")");
        }
          `;
          break;
        case "getPduRTotalCount":
          javaCodeToInject = `
        // Get total PduR count using utility method
        pdur.PdurExtractorUtil pdurUtil = new pdur.PdurExtractorUtil();
        int totalPduCount = pdur.PdurExtractorUtil.getTotalPduCount(ecucDataModel.getPduR());
        System.out.println("Total PduR PDU count: " + totalPduCount);
          `;
          break;
        case "getCanIfChannels":
          javaCodeToInject = `
        // Get all CanIf channels
        java.util.Map<String, can.CanIfChannel> channels = ecucDataModel.getCanIf().getCanIfChannels();
        System.out.println("CanIf Channels:");
        for (String channelName : channels.keySet()) {
            can.CanIfChannel channel = channels.get(channelName);
            System.out.println("- Channel: " + channel.getCanIfChannelName());
            System.out.println("  PDUs: " + channel.getCanIfPdus().size());
        }
          `;
          break;
        default:
          if (command.startsWith("findPduRSrcPdu:")) {
            const pduName = command.substring("findPduRSrcPdu:".length);
            javaCodeToInject = `
        // Find PduR source PDU by name
        pdur.PduRSrcPdu targetSrcPdu = pdur.PdurExtractorUtil.findSrcPduByName(
            ecucDataModel.getPduR().getPduRSrcPdus(), 
            "${pduName}"
        );
        
        if (targetSrcPdu != null) {
            System.out.println("Found ${pduName}:");
            System.out.println("  PDU Name: " + targetSrcPdu.getPduName());
            System.out.println("  Referenced EcucPdu Name: " + targetSrcPdu.getEcucPduRef().getPduName());
            System.out.println("  Referenced EcucPdu ID: " + targetSrcPdu.getEcucPduRef().getPduId());
            System.out.println("  Referenced EcucPdu Length: " + targetSrcPdu.getEcucPduRef().getPduLength() + " bytes");
        } else {
            System.out.println("${pduName} not found!");
        }
            `;
          } else if (command.startsWith("custom:")) {
            javaCodeToInject = command.substring("custom:".length);
          } else {
            throw new Error(`Unknown command: ${command}`);
          }
      }

      // Write a temporary Java file with the injection
      const tempJavaContent = `
import model.EcucModel;
import pdur.PdurExtractorUtil;

public class EcucExtractor {
    
    public static void main(String[] args) throws Exception {
        
        EcucModel ecucDataModel = new EcucModel();
        ecucDataModel.initialize();

        // Print the model to verify
        System.out.println(ecucDataModel);

        // The following part shall be generated by Copilot based on the instructions in COPILOT_INSTRUCTIONS.md
        // Copilot: start writing your code here
        
        ${javaCodeToInject}

        // Copilot: stop writing your code here
    }
}
      `;

      // Use the portable compilation script
      scriptPath = path.join(ECUC_PROJECT_PATH, "compile_and_run_portable.sh");
      
      const javaProcess = spawn('sh', [scriptPath], {
        cwd: ECUC_PROJECT_PATH,
        stdio: ['pipe', 'pipe', 'pipe'],
        env: { ...process.env, TEMP_JAVA_CODE: tempJavaContent }
      });

      let output = '';
      let errorOutput = '';

      javaProcess.stdout.on('data', (data: Buffer) => {
        output += data.toString();
      });

      javaProcess.stderr.on('data', (data: Buffer) => {
        errorOutput += data.toString();
      });

      javaProcess.on('close', (code: number | null) => {
        if (code === 0) {
          resolve(output);
        } else {
          reject(new Error(`Java process failed with code ${code}: ${errorOutput}`));
        }
      });

      javaProcess.on('error', (error: Error) => {
        reject(new Error(`Failed to start Java process: ${error.message}`));
      });
    } catch (error) {
      reject(new Error(`Error executing Java extractor: ${(error as Error).message}`));
    }
  });
}

// Register tools
server.tool(
  "get_all_com_ipdus",
  "Get all ComIPdus from the Com model with their details",
  {},
  async () => {
    try {
      const result = await executeJavaExtractor("getAllComIPdus");
      return {
        content: [
          {
            type: "text",
            text: result,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `Error retrieving ComIPdus: ${(error as Error).message}`,
          },
        ],
      };
    }
  }
);

server.tool(
  "find_pdur_src_pdu_by_name",
  "Find a PduR source PDU by name",
  {
    pduName: z.string().describe("Name of the PduR source PDU to find"),
  },
  async ({ pduName }) => {
    try {
      const result = await executeJavaExtractor(`findPduRSrcPdu:${pduName}`);
      return {
        content: [
          {
            type: "text",
            text: result,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `Error finding PduR source PDU "${pduName}": ${(error as Error).message}`,
          },
        ],
      };
    }
  }
);

server.tool(
  "get_pdur_total_count",
  "Get total PDU count from PduR module",
  {},
  async () => {
    try {
      const result = await executeJavaExtractor("getPduRTotalCount");
      return {
        content: [
          {
            type: "text",
            text: result,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `Error getting PduR total count: ${(error as Error).message}`,
          },
        ],
      };
    }
  }
);

server.tool(
  "get_canif_channels",
  "Get all CanIf channels and their configurations",
  {},
  async () => {
    try {
      const result = await executeJavaExtractor("getCanIfChannels");
      return {
        content: [
          {
            type: "text",
            text: result,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `Error getting CanIf channels: ${(error as Error).message}`,
          },
        ],
      };
    }
  }
);

server.tool(
  "extract_custom_data",
  "Execute custom ECUC data extraction code",
  {
    extractionCode: z.string().describe("Custom Java code snippet to execute for data extraction"),
  },
  async ({ extractionCode }) => {
    try {
      const result = await executeJavaExtractor(`custom:${extractionCode}`);
      return {
        content: [
          {
            type: "text",
            text: result,
          },
        ],
      };
    } catch (error) {
      return {
        content: [
          {
            type: "text",
            text: `Error executing custom extraction: ${(error as Error).message}`,
          },
        ],
      };
    }
  }
);

// Register resources
server.resource(
  "ecuc-model-overview",
  "ecuc://model/overview",
  {
    name: "ECUC Model Overview",
    description: "Overview of the ECUC model structure and available modules",
    mimeType: "text/plain"
  },
  async () => {
    try {
      const overview = `
ECUC Model Overview
==================

The ECUC (ECU Configuration) model contains the following main modules:

1. Com Module:
   - Contains ComIPdus (Communication Interface PDUs)
   - Handles message transmission and reception
   - Direction: Rx (Receive) and Tx (Transmit)

2. CanIf Module:
   - CAN Interface module with channels
   - Contains CanIfPduCfg configurations
   - Manages CAN channel configurations

3. PduR Module:
   - PDU Router module
   - Contains source and destination PDUs
   - Manages routing paths between PDUs

Available Tools:
- get_all_com_ipdus: Retrieve all ComIPdus
- find_pdur_src_pdu_by_name: Find specific PduR source PDU
- get_pdur_total_count: Get total PDU count
- get_canif_channels: Get CanIf channel information
- extract_custom_data: Execute custom extraction code

Usage:
The server integrates with existing Java ECUC extraction utilities
and provides a standardized MCP interface for AI assistants.
      `;

      return {
        contents: [
          {
            uri: "ecuc://model/overview",
            text: overview.trim(),
            mimeType: "text/plain"
          }
        ]
      };
    } catch (error) {
      throw new Error(`Error generating model overview: ${(error as Error).message}`);
    }
  }
);

// Main function to run the server
async function main() {
  const transport = new StdioServerTransport();
  await server.connect(transport);
  console.error("ECUC MCP Server running on stdio");
}

main().catch((error) => {
  console.error("Fatal error in main():", error);
  process.exit(1);
});
